generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  firstName          String
  lastName           String
  role               Role                @default(STUDENT)
  avatarUrl          String?
  dateOfBirth        DateTime?
  phone              String?
  gender             Gender?
  state              String?
  lga                String?
  address            String?
  isActive           Boolean             @default(true)
  credentials        Credential[]        @relation("UserCredentials")
  loginAttempts      LoginAttempt[]
  sessions           LoginSession[]
  student            Student?
  teacher            Teacher?
  parent             Parent?
  admin              Admin?
  superAdmin         SuperAdmin?
  assessmentsEdited  Assessment[]        @relation("AssessmentEditedByUser")
  assessmentsCreated Assessment[]        @relation("AssessmentCreatedByUser")
  assessmentsUpdated Assessment[]        @relation("AssessmentUpdatedByUser")
  createdTransitions StudentTransition[] @relation("CreatedByUser")
  enrollmentHistory  StudentEnrollmentHistory[] @relation("EnrollmentHistoryCreatedBy")
  integrityChecks    DataIntegrityCheck[] @relation("IntegrityChecksRunBy")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([role, isActive])
  @@index([gender])
  @@index([state])
  @@index([createdAt, role])
  @@map("users")
}

model Student {
  id          String              @id @default(uuid())
  userId      String              @unique
  schoolId    String
  admissionNo String              @unique
  year        Int?
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  school      School              @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  
  parents     StudentParent[]     @relation("StudentParents")
  classTerms  StudentClassTerm[]  @relation("StudentClassTerms")
  assessments Assessment[]        @relation("StudentAssessments")
  payments    Payment[]           @relation("StudentPayments")
  transitions StudentTransition[] @relation("StudentTransitions")
  attendances Attendance[]        @relation("StudentAttendances")
  enrollmentHistory StudentEnrollmentHistory[] @relation("StudentEnrollmentHistory")

  @@index([schoolId])
  @@index([admissionNo])
  @@index([year])
  @@index([createdAt])
  @@map("students")
}

model Assessment {
  id                 String           @id @default(uuid())
  studentId          String
  subjectId          String
  termId             String
  studentClassTermId String
  teacherId          String?

  // Scores
  ca1  Float?
  ca2  Float?
  ca3  Float?
  exam Float?

  // Derived fields
  grade      String?
  remark     String?

  // Status Flags
  isAbsent    Boolean @default(false)
  isExempt    Boolean @default(false)
  isPublished Boolean @default(false)

  editedBy     String
  editedByUser User     @relation("AssessmentEditedByUser", fields: [editedBy], references: [id])
  
  createdBy    String
  createdByUser User @relation("AssessmentCreatedByUser", fields: [createdBy], references: [id])
  updatedBy    String?
  updatedByUser User? @relation("AssessmentUpdatedByUser", fields: [updatedBy], references: [id])

  // Version control
  version           Int      @default(1)
  previousVersionId String?
  isDraft           Boolean  @default(true)
  submittedAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  student          Student @relation("StudentAssessments", fields: [studentId], references: [id], onDelete: Cascade)
  subject          Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  term             Term    @relation(fields: [termId], references: [id], onDelete: Cascade)
  studentClassTerm StudentClassTerm @relation(fields: [studentClassTermId], references: [id], onDelete: Cascade)
  teacher          Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId, termId, teacherId])
  @@index([studentId])
  @@index([subjectId])
  @@index([termId])
  @@index([studentClassTermId])
  @@index([teacherId])
  @@index([termId, subjectId, isPublished])
  @@index([studentClassTermId, subjectId])
  @@index([createdAt, editedBy])
  @@map("assessments")
}

model StudentEnrollmentHistory {
  id          String           @id @default(uuid())
  studentId   String
  classTermId String
  termId      String
  action      EnrollmentAction
  previousClassTermId String?
  reason      String?
  createdBy   String
  createdAt   DateTime         @default(now())

  student     Student  @relation("StudentEnrollmentHistory", fields: [studentId], references: [id], onDelete: Cascade)
  classTerm   ClassTerm @relation(fields: [classTermId], references: [id], onDelete: Cascade)
  term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
  createdByUser User   @relation("EnrollmentHistoryCreatedBy", fields: [createdBy], references: [id])

  @@index([studentId, termId])
  @@index([classTermId, action])
}

model StudentTransition {
  id              String         @id @default(uuid())
  studentId       String
  fromClassTermId String
  toClassTermId   String
  transitionType  TransitionType
  transitionDate  DateTime       @default(now())
  notes           String?
  createdBy       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  student       Student   @relation("StudentTransitions", fields: [studentId], references: [id], onDelete: Cascade)
  fromClassTerm ClassTerm @relation("FromClassTerm", fields: [fromClassTermId], references: [id], onDelete: Cascade)
  toClassTerm   ClassTerm @relation("ToClassTerm", fields: [toClassTermId], references: [id], onDelete: Cascade)
  createdByUser User      @relation("CreatedByUser", fields: [createdBy], references: [id])

  @@index([studentId])
  @@index([fromClassTermId])
  @@index([toClassTermId])
  @@index([transitionDate])
  @@index([transitionType])
}

model GradingSystem {
  id          String       @id @default(uuid())
  schoolId    String
  name        String       @default("WAEC Standard")
  description String?
  isDefault   Boolean      @default(false)
  passMark    Float        @default(40)
  levels      GradeLevel[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model GradeLevel {
  id              String        @id @default(uuid())
  gradingSystemId String
  minScore        Float
  maxScore        Float
  grade           String
  remark          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  gradingSystem GradingSystem @relation(fields: [gradingSystemId], references: [id], onDelete: Cascade)

  @@unique([gradingSystemId, grade])
}

model Payment {
  id             String        @id @default(uuid())
  studentId      String
  feeStructureId String
  amount         Float
  paymentDate    DateTime
  receiptNo      String        @unique
  paymentMethod  String
  status         PaymentStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  student      Student      @relation("StudentPayments", fields: [studentId], references: [id], onDelete: Cascade)
  feeStructure FeeStructure @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([feeStructureId])
}

model Credential {
  id            String         @id @default(uuid())
  userId        String
  type          CredentialType
  value         String         @unique
  passwordHash  String
  isPrimary     Boolean        @default(true)
  lastUsedAt    DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user          User           @relation("UserCredentials", fields: [userId], references: [id], onDelete: Cascade)
  loginAttempts LoginAttempt[]
  sessions      LoginSession[]

  @@unique([userId, type])
  @@index([type, value])
}

model LoginAttempt {
  id                String        @id @default(uuid())
  credentialId      String?
  userId            String
  ipAddress         String
  userAgent         String?
  deviceFingerprint String?
  status            AttemptStatus
  attemptTime       DateTime      @default(now())
  metadata          Json?

  credential Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginSession {
  id           String      @id @default(uuid())
  userId       String
  credentialId String?
  ipAddress    String
  userAgent    String?
  deviceId     String?
  sessionToken String
  issuedAt     DateTime    @default(now())
  expiresAt    DateTime
  revokedAt    DateTime?
  lastActivity DateTime?
  sessionData  Json?

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  credential Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)
}

model School {
  id                      String            @id @default(uuid())
  name                    String
  code                    String            @unique
  address                 String
  phone                   String
  email                   String
  website                 String?
  logoUrl                 String?
  isActive                Boolean           @default(true)

  admissionPrefix         String            @default("STD")
  admissionFormat         String            @default("{PREFIX}-{YEAR}-{NUMBER}")
  admissionSequenceStart  Int               @default(1)

  sessions                Session[]
  classes                 Class[]
  subjects                Subject[]
  students                Student[]
  teachers                Teacher[]
  parents                 Parent[]
  admins                  Admin[]
  gradingSystems          GradingSystem[]
  admissionSequences      AdmissionSequence[]
  systemConfigurations    SystemConfiguration[]

  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
}

model AdmissionSequence {
  id            String   @id @default(uuid())
  schoolId      String
  year          Int
  lastSequence  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, year])
  @@index([schoolId, year])
}

model Session {
  id        String   @id @default(uuid())
  schoolId  String
  name      String
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean  @default(false)
  terms     Term[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model Term {
  id            String         @id @default(uuid())
  sessionId     String
  name          String
  startDate     DateTime
  endDate       DateTime
  isCurrent     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  session       Session        @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  classTerms    ClassTerm[]
  assessments   Assessment[]
  feeStructures FeeStructure[]
  studentClassTerms StudentClassTerm[]
  enrollmentHistory StudentEnrollmentHistory[]
}

model Class {
  id            String         @id @default(uuid())
  schoolId      String
  name          String
  level         ClassLevel
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classTerms    ClassTerm[]
  subjects      ClassSubject[]
  feeStructures FeeStructure[]
}

model Subject {
  id              String           @id @default(uuid())
  schoolId        String
  name            String
  code            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  school          School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  classSubjects   ClassSubject[]
  teacherSubjects TeacherSubject[]
  assessments     Assessment[]
}

model ClassTerm {
  id              String              @id @default(uuid())
  classId         String
  termId          String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  class           Class               @relation(fields: [classId], references: [id], onDelete: Cascade)
  term            Term                @relation(fields: [termId], references: [id], onDelete: Cascade)
  students        StudentClassTerm[]
  teachers        TeacherClassTerm[]
  classSubjects   ClassSubject[]
  fromTransitions StudentTransition[] @relation("FromClassTerm")
  toTransitions   StudentTransition[] @relation("ToClassTerm")
  enrollmentHistory StudentEnrollmentHistory[]

  @@unique([classId, termId])
}

model ClassSubject {
  id          String    @id @default(uuid())
  classId     String
  subjectId   String
  classTermId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject   Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classTerm ClassTerm @relation(fields: [classTermId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId, classTermId])
}

model StudentClassTerm {
  id          String           @id @default(uuid())
  studentId   String
  classTermId String
  termId      String
  status      EnrollmentStatus @default(ACTIVE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  student   Student   @relation("StudentClassTerms", fields: [studentId], references: [id], onDelete: Cascade)
  classTerm ClassTerm @relation(fields: [classTermId], references: [id], onDelete: Cascade)
  term      Term      @relation(fields: [termId], references: [id], onDelete: Cascade)
  assessments Assessment[]

  @@unique([studentId, classTermId])
  @@unique([studentId, termId, status])
  @@index([classTermId, status])
  @@index([termId, status])
  @@map("student_class_terms")
}

model SystemConfiguration {
  id            String   @id @default(uuid())
  schoolId      String?
  configKey     String
  configValue   String
  configType    String   @default("STRING")
  description   String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  school School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, configKey])
  @@index([configKey, isActive])
}

model DataIntegrityCheck {
  id          String   @id @default(uuid())
  checkType   String
  description String
  status      CheckStatus @default(PENDING)
  issuesFound Int      @default(0)
  resolvedAt  DateTime?
  runBy       String
  createdAt   DateTime @default(now())

  runByUser User @relation("IntegrityChecksRunBy", fields: [runBy], references: [id], onDelete: Cascade)

  @@index([checkType, status])
  @@index([createdAt])
}

model StudentParent {
  id           String   @id @default(uuid())
  studentId    String
  parentId     String
  relationship String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  student Student @relation("StudentParents", fields: [studentId], references: [id], onDelete: Cascade)
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
}

model Teacher {
  id                String             @id @default(uuid())
  userId            String             @unique
  schoolId          String
  staffId           String
  department        String?
  qualification     String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  school            School             @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacherClassTerms TeacherClassTerm[]
  teacherSubjects   TeacherSubject[]
  assessments       Assessment[]

  @@unique([userId, schoolId])
  @@unique([staffId, schoolId])
  @@index([schoolId])
}

model TeacherClassTerm {
  id          String    @id @default(uuid())
  teacherId   String
  classTermId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  teacher   Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  classTerm ClassTerm @relation(fields: [classTermId], references: [id], onDelete: Cascade)

  @@unique([teacherId, classTermId])
}

model TeacherSubject {
  id        String   @id @default(uuid())
  teacherId String
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([teacherId, subjectId])
}

model Parent {
  id         String          @id @default(uuid())
  userId     String          @unique
  schoolId   String
  occupation String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  school  School          @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students StudentParent[]

  @@unique([userId, schoolId])
}

model Admin {
  id          String   @id @default(uuid())
  userId      String   @unique
  schoolId    String?
  permissions String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  school School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model SuperAdmin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FeeStructure {
  id          String    @id @default(uuid())
  name        String
  description String?
  amount      Float
  classId     String
  termId      String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  term  Term  @relation(fields: [termId], references: [id], onDelete: Cascade)
  payments Payment[]
}

model Attendance {
  id        String   @id @default(uuid())
  studentId String
  date      DateTime
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation("StudentAttendances", fields: [studentId], references: [id], onDelete: Cascade)
}

// Enums remain the same
enum Role {
  SUPER_ADMIN
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

enum CredentialType {
  EMAIL
  REGISTRATION_NUMBER
  PSN
  PHONE
}

enum AttemptStatus {
  SUCCESS
  FAILED_PASSWORD
  FAILED_CREDENTIAL
  LOCKED_OUT
}

enum ClassLevel {
  PRIMARY
  JSS
  SSS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ScoreType {
  PERCENTAGE
  RAW_SCORE
}

enum TransitionType {
  PROMOTION
  TRANSFER
  WITHDRAWAL
}

enum EnrollmentAction {
  ENROLLED
  TRANSFERRED
  PROMOTED
  WITHDRAWN
  GRADUATED
}

enum CheckStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum EnrollmentStatus {
  ACTIVE
  TRANSFERRED
  COMPLETED
  DROPPED
}